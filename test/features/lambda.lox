namespace test.features

val square = fun(a){ 
    return a * a
}
println("Using anonymous function for square(2): ${square(2)}")
println("Invoke anonymous function pow(2, 3) directly: ")
fun(a, b){ println(a.pow(b)) }(2, 3)
println("Class of anonymous function: ${square.getClassName()}")
println("Arity of anonymous function: ${square.arity()}")
println("Name of anonymous function: ${square.name()}")

val calculate = fun(n, operation){ 
    return operation(n)
}
print("Higher order function multiply(2, 3): ")
println(calculate(2, fun(a){ return a * 3 }))
val curry = fun(x){
    return fun(y){
        return x * y
    }
}
println("Curried Higher order function multiply(2)(3): ${curry(2)(3)}")

val pow = fun(x, y) {
    return x.pow(y)
}
println("Call function dynamically using pow.call(2, 3): ${pow.call(2, 3)}")
println("")

fun sum(..args){ 
    var i = 0
    var sum = 0
    while(i < args.length()){
        sum = sum + args[i]
        i = i + 1
    }
    return sum
}
println("Creating a variadic function sum(..args): ${sum(1, 2, 3, 4, 5)}")
println("Function sum is variadic: ${sum.isVariadic()}")
println("")

val lambda0 = { 5; }
val lambda1 = {|x| x * 2; }
val lambda2 = {
    |x, y|
    var z = x.pow(y)
    z = x + 2
    z
}
println("Creating lambda closures: ")
println("Evaluate lambda without parameter: ${lambda0}")
println("Evaluate lambda with 1 parameter: ${lambda1(4)}")
println("Evaluate lambda with 2 parameters: ${lambda2(2, 3)}")
println("")

println("Testing nonlocal return for lambda: ")
fun nonlocal(closure) {
    println("Start closure")
    closure()
    println("Local return")
}
nonlocal({ println("Nonlocal return"); return 5 })