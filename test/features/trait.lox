namespace test.features

trait TVehicle { 

    Bool isMoving(){ 
        return this.speed > 0
    }

    void drive(Number speed){ 
        this.speed = speed
    }

    void accelerate(Number dSpeed){ 
        this.speed = this.speed + dSpeed
    } 

    void stop(){ 
        this.speed = 0
    }
}

println("Trait: ${TVehicle}")
println("TVehicle is trait: ${TVehicle.isTrait()}")
println("TVehicle is class: ${TVehicle.isClass()}")
println("TVehicle has method 'drive': ${TVehicle.hasMethod("drive")}")
println("TVehicle has method 'carry': ${TVehicle.hasMethod("carry")}")
println("Class of TVehicle: ${TVehicle.getClass()}")
println("Class of Trait: ${TVehicle.getClass().getClass()}")
println("Class of Trait class: ${TVehicle.getClass().getClass().getClass()}")
println("Superclass of Trait: ${TVehicle.getClass().superclass()}")
println("")

trait TTruck with TVehicle { 

    void carry(Number dLoad) { 
        if(this.isMoving()) this.stop()
        this.load = this.load + dLoad
    }

    void offload(){ 
        this.load = 0
    }
}

println("Trait: ${TTruck}")
println("TTruck has method 'drive': ${TTruck.hasMethod("drive")}")
println("TTruck has method 'carry': ${TTruck.hasMethod("carry")}")
println("")

class Vehicle with TVehicle { 

    __init__(String color, Number speed){ 
        this.color = color
        this.speed = speed
    }

    String toString(){ 
        val message = "${this.color} ${this.getClassName().toLowercase()}"
        if(this.isMoving()) return "${message} is moving at ${this.speed} mph"
        else return "${message} is stationary"
    }
}

val vehicle = Vehicle("blue", 40)
println("Creating vehicle...")
println(vehicle.toString())
println("Vehicle color: ${vehicle.color}")
println("Vehicle speed: ${vehicle.speed}")
println("Vehicle is moving: ${vehicle.isMoving()}")
println("Accelerate Vehicle by 10mph: ")
vehicle.accelerate(10)
println(vehicle.toString())
println("Vehicle is instance of class Vehicle: ${vehicle.instanceOf(Vehicle)}")
println("Vehicle is instance of trait TVehicle: ${vehicle.instanceOf(TVehicle)}")
println("Vehicle is instance of trait TTruck: ${vehicle.instanceOf(TTruck)}")
println("")

class Truck extends Vehicle with TTruck { 

    __init__(String color, Number speed, Number load) { 
        super.__init__(color, speed)
        this.load = load
    }

    String toString(){ 
        val message = "${this.load} ton ${this.color} truck"
        if(this.isMoving()) return "${message} is moving at ${this.speed} mph"
        else return "${message} is stationary"
    }
}

val truck = Truck("white", 30, 5)
println("Creating truck... ")
println(truck.toString())
println("Truck color: ${truck.color}")
println("Truck load: ${truck.load}")
println("Vehicle is moving: ${truck.isMoving()}")
println("Adding 3 ton load to truck: ")
truck.carry(3)
println(truck.toString())

println("Truck is an instance of class Truck: ${truck.instanceOf(Truck)}")
println("Truck is instance of trait TTruck: ${truck.instanceOf(TTruck)}")
println("Truck is instance of class Vehicle: ${truck.instanceOf(Vehicle)}")
println("Truck is instance of trait TVehicle: ${truck.instanceOf(TVehicle)}")
println("")

println("Number implements trait TComparable: ${Number.traits().contains(TComparable)}")
println("Int is instance of trait TComparable: ${2.instanceOf(TComparable)}")
println("Float is instance of trait TComparable: ${3.5.instanceOf(TComparable)}")
println("Bool is instance of trait TComparable: ${true.instanceOf(TComparable)}")
println("Nil is instance of trait TComparable: ${nil.instanceOf(TComparable)}")